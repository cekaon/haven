/******************************************************************************
 *     "Copyright (C) 2013, ApS s.r.o Brno, All Rights Reserved"             *
 ******************************************************************************/
/**
 *  \file
 *  \date   Thu Jan 17 15:32:01 2013, generated by Codasip HW generator v1.6.0.
 *  \brief  Definition of the golden model.
 */

// the file is generated on run-time by the 'start.fdo' script.
`include "object_info.sv"

// import DPI function to control golden model
import "DPI-C" context function void sim_reset();
import "DPI-C" context function int sim_clock_cycle();
import "DPI-C" context function void load_program( int unsigned addr, logic[WORD_BIT_WIDTH -1 : 0] data, int WORD_BIT_WIDTH );
import "DPI-C" context function void get_dpi_regs( output logic [31:0] data, input int unsigned addr );
import "DPI-C" context function void set_dpi_irq( input logic );
import "DPI-C" context function void get_dpi_port_halt( output logic );
import "DPI-C" context function void get_dpi_port_output( output logic [31:0] );
import "DPI-C" context function void get_dpi_port_output_en( output logic );
import "DPI-C" context function void get_dpi_port_error( output logic [31:0] );

// Represents the golden model of the processor used to predict results of the DUT.
class codix_ca_gm extends ovm_component;

	// registration of component tools
	`ovm_component_utils( codix_ca_gm )

	// declaration of analysis port to connect to the scoreboard
	ovm_analysis_port #(codix_ca_core_regs_transaction) aport_icodix_ca_core_regs_if;
	tlm_analysis_fifo #(codix_ca_input_transaction) m_golden_model_codix_ca_input_fifo;
	ovm_analysis_port #(codix_ca_output_transaction) aport_golden_model;

	// Constructor - creates new instance of this class
	function new( string name, ovm_component parent );
		super.new( name, parent );
	endfunction: new

	// Build - instantiates child components
	function void build;
		super.build();
		aport_icodix_ca_core_regs_if = new( "aport_icodix_ca_core_regs_if", this );
		m_golden_model_codix_ca_input_fifo = new( "m_golden_model_codix_ca_input_fifo", this );
		aport_golden_model = new( "aport_golden_model", this );
	endfunction: build

	// Resource access methods
	// sends the content of register file to the scoreboard
	function void store_regs();
		automatic codix_ca_core_regs_transaction tr = new( "golden_model_codix_ca_core_regs_transaction" );
		// load register file content
		tr.codix_ca_core_regs_init = new[32];
		foreach( tr.codix_ca_core_regs_init[i] )
			get_dpi_regs( tr.codix_ca_core_regs_init[i], i );
		// send it to the scoreboard
		aport_icodix_ca_core_regs_if.write( tr );
	endfunction: store_regs

	// create transaction and send it to scoreboard
	function void store_result();
		automatic codix_ca_output_transaction tr = new( "golden_model_codix_ca_output_transaction " );
		get_dpi_port_halt( tr.codix_ca_port_halt );
		get_dpi_port_output( tr.codix_ca_port_output );
		get_dpi_port_output_en( tr.codix_ca_port_output_en );
		get_dpi_port_error( tr.codix_ca_port_error );

		aport_golden_model.write( tr );
	endfunction: store_result

	// initialize and run the simulation of the golden model
	task run();
		automatic logic[WORD_BIT_WIDTH -1 : 0] line;
		automatic int unsigned addr = 0;
		automatic string path = "./xexes/program";
		automatic int fd = $fopen( path, "r" );
		automatic longint unsigned counter = 0;

		// open file to initialize the memory
		if ( !fd ) begin
			ovm_report_error( get_type_name(), $psprintf("Failed to open input file '%s' to load program code!\n", path) );
			global_stop_request();
			$stop;
		end
		// reset the golden model
		sim_reset();
		// initialization it
		while ( !$feof(fd) )
		begin
			void'($fscanf( fd, "%b\n", line ));
			load_program( addr, line, WORD_BIT_WIDTH );
			addr += BYTES_PER_WORD_COUNT;
		end
		$fclose( fd );
		// start the simulation of the golden model
		while ( (sim_clock_cycle() == 0) & (counter < ITERATION_COUNT_LIMIT) )
		begin
			store_result();
			++counter;
		end
		store_result();
	endtask: run

	// send content of register files to the scoreboard.
	function void extract();
		store_regs();
	endfunction: extract

endclass: codix_ca_gm
