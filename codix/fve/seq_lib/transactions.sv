/******************************************************************************
 *     "Copyright (C) 2013, ApS s.r.o Brno, All Rights Reserved"             *
 ******************************************************************************/
/**
 *  \file
 *  \date   Mon Mar  4 13:49:04 2013, generated by Codasip HW generator v2.0.0.
 *  \brief  Definitions of all transactions needed.
 */

// This class represents transaction which contains values of output signals for 'codix_ca_core_regs'.
class codix_ca_core_regs_transaction extends ovm_sequence_item;

	// Member attribute representing the array
	logic [31:0] codix_ca_core_regs_init[];
	// Member attributes, equivalent with interface ports
	logic [4:0] codix_ca_core_regs_RA0;
	logic codix_ca_core_regs_RE0;
	logic [4:0] codix_ca_core_regs_RA1;
	logic codix_ca_core_regs_RE1;
	logic [4:0] codix_ca_core_regs_RA2;
	logic codix_ca_core_regs_RE2;
	logic [31:0] codix_ca_core_regs_D0;
	logic codix_ca_core_regs_WE0;
	logic [4:0] codix_ca_core_regs_WA0;
	logic [31:0] codix_ca_core_regs_Q0;
	logic [31:0] codix_ca_core_regs_Q1;
	logic [31:0] codix_ca_core_regs_Q2;

	// registration of object tools
	`ovm_object_utils_begin( codix_ca_core_regs_transaction )
		`ovm_field_int( codix_ca_core_regs_RA0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_core_regs_RE0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_core_regs_RA1, OVM_ALL_ON )
		`ovm_field_int( codix_ca_core_regs_RE1, OVM_ALL_ON )
		`ovm_field_int( codix_ca_core_regs_RA2, OVM_ALL_ON )
		`ovm_field_int( codix_ca_core_regs_RE2, OVM_ALL_ON )
		`ovm_field_int( codix_ca_core_regs_D0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_core_regs_WE0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_core_regs_WA0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_core_regs_Q0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_core_regs_Q1, OVM_ALL_ON )
		`ovm_field_int( codix_ca_core_regs_Q2, OVM_ALL_ON )
		`ovm_field_array_int( codix_ca_core_regs_init, OVM_ALL_ON | OVM_NOCOMPARE )
	`ovm_object_utils_end

	// Constructor - creates new instance of this class
	function new( string name = "codix_ca_core_regs_transaction" );
		super.new( name );
	endfunction : new

	// Indicates if the transaction is valid for the subscriber or not.
	function bit is_valid();
		return codix_ca_core_regs_init.size() == 0;
	endfunction: is_valid

	// properly compare array if it holds register file content
	function bit do_compare( ovm_object rhs, ovm_comparer comparer );
		codix_ca_core_regs_transaction rhs_;
		do_compare = super.do_compare( rhs, comparer );

		assert( $cast(rhs_, rhs) );
		assert( this.is_valid() == rhs_.is_valid() );
		// for "valid" transaction, comparison should be made by compare function
		if ( this.is_valid() & rhs_.is_valid() )
		begin
			return do_compare;
		end
		// compare array content, some fields may contain X/U in DUT, but golden model (IA simulator) returns all zeros
		assert( this.codix_ca_core_regs_init.size() == rhs_.codix_ca_core_regs_init.size() );
		foreach( this.codix_ca_core_regs_init[i] )
		begin
			automatic logic currentRes = (this.codix_ca_core_regs_init[i] == rhs_.codix_ca_core_regs_init[i]);
			if ( currentRes !== 1'bx )
			begin
				do_compare &= currentRes;
				void'( comparer.compare_field(
					$psprintf(" Register file 'regs' on index %0d", i),
					this.codix_ca_core_regs_init[i],
					rhs_.codix_ca_core_regs_init[i],
					$bits(this.codix_ca_core_regs_init)) );
			end
		end
	endfunction: do_compare
endclass: codix_ca_core_regs_transaction

// This class represents transaction which contains values of output signals for 'codix_ca_core_main_instr_hw_instr_hw'.
class codix_ca_core_main_instr_hw_instr_hw_transaction extends ovm_sequence_item;

	// Member attributes, equivalent with interface ports
	logic codix_ca_core_main_instr_hw_instr_hw_ACT;
	logic [11:0] codix_ca_core_main_instr_hw_instr_hw_id_instr_Q0;

	// registration of object tools
	`ovm_object_utils_begin( codix_ca_core_main_instr_hw_instr_hw_transaction )
		`ovm_field_int( codix_ca_core_main_instr_hw_instr_hw_ACT, OVM_ALL_ON )
		`ovm_field_int( codix_ca_core_main_instr_hw_instr_hw_id_instr_Q0, OVM_ALL_ON )
	`ovm_object_utils_end

	// Constructor - creates new instance of this class
	function new( string name = "codix_ca_core_main_instr_hw_instr_hw_transaction" );
		super.new( name );
	endfunction : new

	// Indicates if the transaction is valid for the subscriber or not.
	function bit is_valid();
		return codix_ca_core_main_instr_hw_instr_hw_ACT == 1;
	endfunction: is_valid

endclass: codix_ca_core_main_instr_hw_instr_hw_transaction

// This class represents transaction which contains values of output signals for 'codix_ca_mem'.
class codix_ca_mem_transaction extends ovm_sequence_item;

	// Member attributes, equivalent with interface ports
	logic [18:0] codix_ca_mem_RA0;
	logic codix_ca_mem_RE0;
	logic [2:0] codix_ca_mem_RSC0;
	logic [1:0] codix_ca_mem_RSI0;
	logic [18:0] codix_ca_mem_RA1;
	logic codix_ca_mem_RE1;
	logic [2:0] codix_ca_mem_RSC1;
	logic [1:0] codix_ca_mem_RSI1;
	logic [31:0] codix_ca_mem_D0;
	logic codix_ca_mem_WE0;
	logic [18:0] codix_ca_mem_WA0;
	logic [2:0] codix_ca_mem_WSC0;
	logic [1:0] codix_ca_mem_WSI0;
	logic [31:0] codix_ca_mem_Q0;
	logic [2:0] codix_ca_mem_RR0;
	logic [2:0] codix_ca_mem_FR0;
	logic [31:0] codix_ca_mem_Q1;
	logic [2:0] codix_ca_mem_RR1;
	logic [2:0] codix_ca_mem_FR1;
	logic [2:0] codix_ca_mem_RW0;
	logic [2:0] codix_ca_mem_FW0;

	// registration of object tools
	`ovm_object_utils_begin( codix_ca_mem_transaction )
		`ovm_field_int( codix_ca_mem_RA0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_RE0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_RSC0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_RSI0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_RA1, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_RE1, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_RSC1, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_RSI1, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_D0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_WE0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_WA0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_WSC0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_WSI0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_Q0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_RR0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_FR0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_Q1, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_RR1, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_FR1, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_RW0, OVM_ALL_ON )
		`ovm_field_int( codix_ca_mem_FW0, OVM_ALL_ON )
	`ovm_object_utils_end

	// Constructor - creates new instance of this class
	function new( string name = "codix_ca_mem_transaction" );
		super.new( name );
	endfunction : new

	// Indicates if the transaction is valid for the subscriber or not.
	function bit is_valid();
		return 1;
	endfunction: is_valid

endclass: codix_ca_mem_transaction

// This class represents transaction which contains values of output signals for 'codix_ca' - the DUT.
class codix_ca_input_transaction extends ovm_sequence_item;

	// Member attributes, equivalent with interface ports
	rand logic codix_ca_irq;

	// registration of object tools
	`ovm_object_utils_begin( codix_ca_input_transaction )
		`ovm_field_int( codix_ca_irq, OVM_ALL_ON )
	`ovm_object_utils_end

	// Constructor - creates new instance of this class
	function new( string name = "codix_ca_input_transaction" );
		super.new( name );
	endfunction : new

	// Indicates if the transaction is valid for the subscriber or not.
	function bit is_valid();
		return 1;
	endfunction: is_valid

endclass: codix_ca_input_transaction

// This class represents transaction which contains values of output signals for 'codix_ca' - the DUT.
class codix_ca_output_transaction extends ovm_sequence_item;

	// Member attributes, equivalent with interface ports
	logic codix_ca_port_halt;
	logic [31:0] codix_ca_port_output;
	logic codix_ca_port_output_en;
	logic [31:0] codix_ca_port_error;

	// registration of object tools
	`ovm_object_utils_begin( codix_ca_output_transaction )
		`ovm_field_int( codix_ca_port_halt, OVM_ALL_ON )
		`ovm_field_int( codix_ca_port_output, OVM_ALL_ON )
		`ovm_field_int( codix_ca_port_output_en, OVM_ALL_ON )
		`ovm_field_int( codix_ca_port_error, OVM_ALL_ON )
	`ovm_object_utils_end

	// Constructor - creates new instance of this class
	function new( string name = "codix_ca_output_transaction" );
		super.new( name );
	endfunction : new

	// Indicates if the transaction is valid for the subscriber or not.
	function bit is_valid();
		return 1;
	endfunction: is_valid

endclass: codix_ca_output_transaction


// class for synchronization transaction between components
class syncT extends ovm_sequence_item;

  int flag;

  // registration of object tools
  `ovm_object_utils_begin( syncT )
    `ovm_field_int( flag, OVM_ALL_ON )
  `ovm_object_utils_end

  // constructor
  function new( string name = "codix_sync_transaction" );
    super.new( name );
  endfunction : new

endclass: syncT

