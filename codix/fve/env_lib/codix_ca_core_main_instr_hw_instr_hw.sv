/******************************************************************************
 *     "Copyright (C) 2013, ApS s.r.o Brno, All Rights Reserved"             *
 ******************************************************************************/
/**
 *  \file
 *  \date   Mon Mar  4 13:49:04 2013, generated by Codasip HW generator v2.0.0.
 *  \brief  Declaration of instruction enum and decoding function for decoder 'codix_ca_core_main_instr_hw_instr_hw'.
 */

`ifndef CODIX_CA_CORE_MAIN_INSTR_HW_INSTR_HW_SV
`define CODIX_CA_CORE_MAIN_INSTR_HW_INSTR_HW_SV

// enumeration codes for decoded instructions
typedef enum
{
	_dest_add_add_srcA_src_am_uimm_srcC_,
	_dest_add_mul_srcA_src_am_uimm_srcC_,
	_dest_add_srcA_imm_,
	_dest_add_srcA_src_am_uimm_srcC_,
	_dest_add_sub_srcA_src_am_uimm_srcC_,
	_dest_and_srcA_imm_,
	_dest_and_srcA_src_am_uimm_srcC_,
	_dest_ashr_srcA_imm_,
	_dest_ashr_srcA_src_am_uimm_srcC_,
	_dest_ctlz_srcA_src_am_uimm_srcC_,
	_dest_cttz_srcA_src_am_uimm_srcC_,
	_dest_ld_srcA_imm_,
	_dest_ld_srcA_src_am_uimm_,
	_dest_ldbs_srcA_imm_,
	_dest_ldbs_srcA_src_am_uimm_,
	_dest_ldbu_srcA_imm_,
	_dest_ldbu_srcA_src_am_uimm_,
	_dest_ldhs_srcA_imm_,
	_dest_ldhs_srcA_src_am_uimm_,
	_dest_ldhu_srcA_imm_,
	_dest_ldhu_srcA_src_am_uimm_,
	_dest_lshr_srcA_imm_,
	_dest_lshr_srcA_src_am_uimm_srcC_,
	_dest_lui_srcA_imm_,
	_dest_move_binand_srcA_src_op_uimm_src_op_uimm_,
	_dest_move_binnand_srcA_src_op_uimm_src_op_uimm_,
	_dest_move_eq_srcA_src_op_uimm_src_op_uimm_,
	_dest_move_logand_srcA_src_op_uimm_src_op_uimm_,
	_dest_move_lognand_srcA_src_op_uimm_src_op_uimm_,
	_dest_move_lognor_srcA_src_op_uimm_src_op_uimm_,
	_dest_move_logor_srcA_src_op_uimm_src_op_uimm_,
	_dest_move_ne_srcA_src_op_uimm_src_op_uimm_,
	_dest_move_sge_srcA_src_op_uimm_src_op_uimm_,
	_dest_move_sgt_srcA_src_op_uimm_src_op_uimm_,
	_dest_move_sle_srcA_src_op_uimm_src_op_uimm_,
	_dest_move_slt_srcA_src_op_uimm_src_op_uimm_,
	_dest_move_uge_srcA_src_op_uimm_src_op_uimm_,
	_dest_move_ugt_srcA_src_op_uimm_src_op_uimm_,
	_dest_move_ule_srcA_src_op_uimm_src_op_uimm_,
	_dest_move_ult_srcA_src_op_uimm_src_op_uimm_,
	_dest_mul_srcA_src_am_uimm_srcC_,
	_dest_muls_srcA_imm_,
	_dest_mulu_srcA_imm_,
	_dest_nor_srcA_imm_,
	_dest_nor_srcA_src_am_uimm_srcC_,
	_dest_or_srcA_imm_,
	_dest_or_srcA_src_am_uimm_srcC_,
	_dest_select_binand_srcA_src_op_uimm_src_op_uimm_,
	_dest_select_binnand_srcA_src_op_uimm_src_op_uimm_,
	_dest_select_eq_srcA_src_op_uimm_src_op_uimm_,
	_dest_select_logand_srcA_src_op_uimm_src_op_uimm_,
	_dest_select_lognand_srcA_src_op_uimm_src_op_uimm_,
	_dest_select_lognor_srcA_src_op_uimm_src_op_uimm_,
	_dest_select_logor_srcA_src_op_uimm_src_op_uimm_,
	_dest_select_ne_srcA_src_op_uimm_src_op_uimm_,
	_dest_select_sge_srcA_src_op_uimm_src_op_uimm_,
	_dest_select_sgt_srcA_src_op_uimm_src_op_uimm_,
	_dest_select_sle_srcA_src_op_uimm_src_op_uimm_,
	_dest_select_slt_srcA_src_op_uimm_src_op_uimm_,
	_dest_select_uge_srcA_src_op_uimm_src_op_uimm_,
	_dest_select_ugt_srcA_src_op_uimm_src_op_uimm_,
	_dest_select_ule_srcA_src_op_uimm_src_op_uimm_,
	_dest_select_ult_srcA_src_op_uimm_src_op_uimm_,
	_dest_sext16_srcA_src_am_uimm_srcC_,
	_dest_sext8_srcA_src_am_uimm_srcC_,
	_dest_shl_srcA_imm_,
	_dest_shl_srcA_src_am_uimm_srcC_,
	_dest_sub_add_srcA_src_am_uimm_srcC_,
	_dest_sub_mul_srcA_src_am_uimm_srcC_,
	_dest_sub_srcA_imm_,
	_dest_sub_srcA_src_am_uimm_srcC_,
	_dest_sub_sub_srcA_src_am_uimm_srcC_,
	_dest_test_binand_srcA_src_op_uimm_src_op_uimm_,
	_dest_test_binnand_srcA_src_op_uimm_src_op_uimm_,
	_dest_test_eq_srcA_src_op_uimm_src_op_uimm_,
	_dest_test_logand_srcA_src_op_uimm_src_op_uimm_,
	_dest_test_lognand_srcA_src_op_uimm_src_op_uimm_,
	_dest_test_lognor_srcA_src_op_uimm_src_op_uimm_,
	_dest_test_logor_srcA_src_op_uimm_src_op_uimm_,
	_dest_test_ne_srcA_src_op_uimm_src_op_uimm_,
	_dest_test_sge_srcA_src_op_uimm_src_op_uimm_,
	_dest_test_sgt_srcA_src_op_uimm_src_op_uimm_,
	_dest_test_sle_srcA_src_op_uimm_src_op_uimm_,
	_dest_test_slt_srcA_src_op_uimm_src_op_uimm_,
	_dest_test_uge_srcA_src_op_uimm_src_op_uimm_,
	_dest_test_ugt_srcA_src_op_uimm_src_op_uimm_,
	_dest_test_ule_srcA_src_op_uimm_src_op_uimm_,
	_dest_test_ult_srcA_src_op_uimm_src_op_uimm_,
	_dest_xor_srcA_imm_,
	_dest_xor_srcA_src_am_uimm_srcC_,
	call_addr_,
	call_exc_addr_,
	call_int_addr_,
	call_srcB_,
	get_status_,
	halt_,
	int_disable_,
	int_enable_,
	jump_addr_,
	jump_binand_srcA_src_op_uimm_addr_,
	jump_binnand_srcA_src_op_uimm_addr_,
	jump_eq_srcA_src_op_uimm_addr_,
	jump_ie_srcB_,
	jump_logand_srcA_src_op_uimm_addr_,
	jump_lognand_srcA_src_op_uimm_addr_,
	jump_lognor_srcA_src_op_uimm_addr_,
	jump_logor_srcA_src_op_uimm_addr_,
	jump_ne_srcA_src_op_uimm_addr_,
	jump_sge_srcA_src_op_uimm_addr_,
	jump_sgt_srcA_src_op_uimm_addr_,
	jump_sle_srcA_src_op_uimm_addr_,
	jump_slt_srcA_src_op_uimm_addr_,
	jump_srcB_,
	jump_uge_srcA_src_op_uimm_addr_,
	jump_ugt_srcA_src_op_uimm_addr_,
	jump_ule_srcA_src_op_uimm_addr_,
	jump_ult_srcA_src_op_uimm_addr_,
	print_reg_,
	set_status_,
	st_srcC_srcA_imm_,
	st_srcC_srcA_src_am_uimm_,
	stb_srcC_srcA_imm_,
	stb_srcC_srcA_src_am_uimm_,
	sth_srcC_srcA_imm_,
	sth_srcC_srcA_src_am_uimm_,
	UNKNOWN
} operation_codes_t;

// Decodes instruction from given data and returns its enumeration code
// implements behavior of 'codix_ca_core_main_instr_hw_instr_hw' decoder.
function operation_codes_t decode( logic [11:0] fetch );
	automatic bit iv_imm1 = 0;
	automatic bit iv_imm3 = 0;
	automatic bit iv_instr_hw_alu = 0;
	automatic bit iv_instr_hw_alu_imm = 0;
	automatic bit iv_instr_hw_jump_abs = 0;
	automatic bit iv_instr_hw_jump_ind = 0;
	automatic bit iv_instr_hw_jump_rel = 0;
	automatic bit iv_instr_hw_ld_imm = 0;
	automatic bit iv_instr_hw_ld_reg = 0;
	automatic bit iv_instr_hw_move = 0;
	automatic bit iv_instr_hw_st_imm = 0;
	automatic bit iv_instr_hw_st_reg = 0;
	automatic bit iv_instr_hw_system = 0;
	automatic bit iv_instr_hw_system_rd = 0;
	automatic bit iv_instr_hw_system_wr = 0;
	automatic bit iv_op_add = 0;
	automatic bit iv_op_addadd = 0;
	automatic bit iv_op_addi = 0;
	automatic bit iv_op_addmul = 0;
	automatic bit iv_op_addpc = 0;
	automatic bit iv_op_addsub = 0;
	automatic bit iv_op_and = 0;
	automatic bit iv_op_andi = 0;
	automatic bit iv_op_ashr = 0;
	automatic bit iv_op_ashri = 0;
	automatic bit iv_op_binand = 0;
	automatic bit iv_op_binnand = 0;
	automatic bit iv_op_call = 0;
	automatic bit iv_op_call_exc = 0;
	automatic bit iv_op_call_int = 0;
	automatic bit iv_op_call_reg = 0;
	automatic bit iv_op_ctlz = 0;
	automatic bit iv_op_cttz = 0;
	automatic bit iv_op_eq = 0;
	automatic bit iv_op_get_status = 0;
	automatic bit iv_op_halt = 0;
	automatic bit iv_op_int_dis = 0;
	automatic bit iv_op_int_en = 0;
	automatic bit iv_op_jump = 0;
	automatic bit iv_op_jump_ie = 0;
	automatic bit iv_op_jump_reg = 0;
	automatic bit iv_op_ld = 0;
	automatic bit iv_op_ldbs = 0;
	automatic bit iv_op_ldbsx = 0;
	automatic bit iv_op_ldbu = 0;
	automatic bit iv_op_ldbux = 0;
	automatic bit iv_op_ldhs = 0;
	automatic bit iv_op_ldhsx = 0;
	automatic bit iv_op_ldhu = 0;
	automatic bit iv_op_ldhux = 0;
	automatic bit iv_op_ldx = 0;
	automatic bit iv_op_logand = 0;
	automatic bit iv_op_lognand = 0;
	automatic bit iv_op_lognor = 0;
	automatic bit iv_op_logor = 0;
	automatic bit iv_op_lshr = 0;
	automatic bit iv_op_lshri = 0;
	automatic bit iv_op_lui = 0;
	automatic bit iv_op_move = 0;
	automatic bit iv_op_mul = 0;
	automatic bit iv_op_mulsi = 0;
	automatic bit iv_op_mului = 0;
	automatic bit iv_op_ne = 0;
	automatic bit iv_op_nor = 0;
	automatic bit iv_op_nori = 0;
	automatic bit iv_op_or = 0;
	automatic bit iv_op_ori = 0;
	automatic bit iv_op_printreg = 0;
	automatic bit iv_op_select = 0;
	automatic bit iv_op_set_status = 0;
	automatic bit iv_op_sext16 = 0;
	automatic bit iv_op_sext8 = 0;
	automatic bit iv_op_sge = 0;
	automatic bit iv_op_sgt = 0;
	automatic bit iv_op_shl = 0;
	automatic bit iv_op_shli = 0;
	automatic bit iv_op_sle = 0;
	automatic bit iv_op_slt = 0;
	automatic bit iv_op_st = 0;
	automatic bit iv_op_stb = 0;
	automatic bit iv_op_stbx = 0;
	automatic bit iv_op_sth = 0;
	automatic bit iv_op_sthx = 0;
	automatic bit iv_op_stx = 0;
	automatic bit iv_op_sub = 0;
	automatic bit iv_op_subadd = 0;
	automatic bit iv_op_subi = 0;
	automatic bit iv_op_submul = 0;
	automatic bit iv_op_subsub = 0;
	automatic bit iv_op_test = 0;
	automatic bit iv_op_uge = 0;
	automatic bit iv_op_ugt = 0;
	automatic bit iv_op_ule = 0;
	automatic bit iv_op_ult = 0;
	automatic bit iv_op_xor = 0;
	automatic bit iv_op_xori = 0;
	automatic bit iv_opr_alu_1op = 0;
	automatic bit iv_opr_alu_2op = 0;
	automatic bit iv_opr_alu_3op = 0;
	automatic bit iv_opr_alu_simm = 0;
	automatic bit iv_opr_alu_uimm = 0;

	if (((fetch[11:9] == 3'b000)) | ((fetch[11:7] == 5'b00100)) | ((fetch[11:6] == 6'b001111)) | ((fetch[11:9] == 3'b001) & (fetch[7:6] == 2'b10))) begin
		iv_instr_hw_alu_imm = 1;
			if (((fetch[11:6] == 6'b000000))) begin
				iv_opr_alu_uimm = 1;
				iv_op_andi = 1;
			end
			else if (((fetch[11:6] == 6'b000001))) begin
				iv_opr_alu_uimm = 1;
				iv_op_ori = 1;
			end
			else if (((fetch[11:6] == 6'b000010))) begin
				iv_opr_alu_uimm = 1;
				iv_op_nori = 1;
			end
			else if (((fetch[11:6] == 6'b000011))) begin
				iv_opr_alu_uimm = 1;
				iv_op_xori = 1;
			end
			else if (((fetch[11:6] == 6'b000100))) begin
				iv_opr_alu_simm = 1;
				iv_op_addi = 1;
			end
			else if (((fetch[11:6] == 6'b000101))) begin
				iv_opr_alu_simm = 1;
				iv_op_subi = 1;
			end
			else if (((fetch[11:6] == 6'b000110))) begin
				iv_opr_alu_simm = 1;
				iv_op_mulsi = 1;
			end
			else if (((fetch[11:6] == 6'b000111))) begin
				iv_opr_alu_uimm = 1;
				iv_op_mului = 1;
			end
			else if (((fetch[11:6] == 6'b001000))) begin
				iv_opr_alu_uimm = 1;
				iv_op_shli = 1;
			end
			else if (((fetch[11:6] == 6'b001001))) begin
				iv_opr_alu_uimm = 1;
				iv_op_ashri = 1;
			end
			else if (((fetch[11:6] == 6'b001010))) begin
				iv_opr_alu_uimm = 1;
				iv_op_lshri = 1;
			end
			else if (((fetch[11:6] == 6'b001110))) begin
				iv_op_lui = 1;
			end
			else if (((fetch[11:6] == 6'b001111))) begin
				iv_op_addpc = 1;
			end
	end
	else if (((fetch[11:6] == 6'b001011)) | ((fetch[11:7] == 5'b00110)) | ((fetch[11:6] == 6'b010100))) begin
		iv_instr_hw_jump_abs = 1;
			if (((fetch[11:6] == 6'b001011))) begin
				iv_op_call = 1;
			end
			else if (((fetch[11:6] == 6'b001100))) begin
				iv_op_call_int = 1;
			end
			else if (((fetch[11:6] == 6'b001101))) begin
				iv_op_call_exc = 1;
			end
			else if (((fetch[11:6] == 6'b010100))) begin
				iv_op_jump = 1;
			end
	end
	else if (((fetch[11:7] == 5'b01000)) | ((fetch[11:6] == 6'b010011))) begin
		iv_instr_hw_move = 1;
			if (((fetch[11:6] == 6'b010000))) begin
				iv_op_move = 1;
			end
			else if (((fetch[11:6] == 6'b010001))) begin
				iv_op_test = 1;
			end
			else if (((fetch[11:6] == 6'b010011))) begin
				iv_op_select = 1;
			end
			if (((fetch[3:0] == 4'b0000))) begin
				iv_op_eq = 1;
			end
			else if (((fetch[3:0] == 4'b0001))) begin
				iv_op_ne = 1;
			end
			else if (((fetch[3:0] == 4'b0010))) begin
				iv_op_slt = 1;
			end
			else if (((fetch[3:0] == 4'b0011))) begin
				iv_op_sge = 1;
			end
			else if (((fetch[3:0] == 4'b0100))) begin
				iv_op_sle = 1;
			end
			else if (((fetch[3:0] == 4'b0101))) begin
				iv_op_sgt = 1;
			end
			else if (((fetch[3:0] == 4'b0110))) begin
				iv_op_ult = 1;
			end
			else if (((fetch[3:0] == 4'b0111))) begin
				iv_op_uge = 1;
			end
			else if (((fetch[3:0] == 4'b1000))) begin
				iv_op_ule = 1;
			end
			else if (((fetch[3:0] == 4'b1001))) begin
				iv_op_ugt = 1;
			end
			else if (((fetch[3:0] == 4'b1010))) begin
				iv_op_binand = 1;
			end
			else if (((fetch[3:0] == 4'b1011))) begin
				iv_op_binnand = 1;
			end
			else if (((fetch[3:0] == 4'b1100))) begin
				iv_op_logand = 1;
			end
			else if (((fetch[3:0] == 4'b1101))) begin
				iv_op_lognand = 1;
			end
			else if (((fetch[3:0] == 4'b1110))) begin
				iv_op_logor = 1;
			end
			else if (((fetch[3:0] == 4'b1111))) begin
				iv_op_lognor = 1;
			end
			iv_imm1 = 1;
			iv_imm1 = 1;
	end
	else if (((fetch[11:6] == 6'b010101)) | ((fetch[11:7] == 5'b01011)) | ((fetch[11:7] == 5'b01100))) begin
		iv_instr_hw_ld_imm = 1;
			if (((fetch[11:6] == 6'b010101))) begin
				iv_op_ldbu = 1;
			end
			else if (((fetch[11:6] == 6'b010110))) begin
				iv_op_ldbs = 1;
			end
			else if (((fetch[11:6] == 6'b010111))) begin
				iv_op_ldhu = 1;
			end
			else if (((fetch[11:6] == 6'b011000))) begin
				iv_op_ldhs = 1;
			end
			else if (((fetch[11:6] == 6'b011001))) begin
				iv_op_ld = 1;
			end
	end
	else if (((fetch[11:7] == 5'b01101)) | ((fetch[11:6] == 6'b011100))) begin
		iv_instr_hw_st_imm = 1;
			if (((fetch[11:6] == 6'b011010))) begin
				iv_op_stb = 1;
			end
			else if (((fetch[11:6] == 6'b011011))) begin
				iv_op_sth = 1;
			end
			else if (((fetch[11:6] == 6'b011100))) begin
				iv_op_st = 1;
			end
	end
	else if (((fetch[11:8] == 4'b1000)) | ((fetch[11:6] == 6'b100100))) begin
		iv_instr_hw_alu = 1;
			if (((fetch[11:3] == 9'b100000000))) begin
				iv_opr_alu_2op = 1;
				iv_op_and = 1;
			end
			else if (((fetch[11:3] == 9'b100000001))) begin
				iv_opr_alu_2op = 1;
				iv_op_or = 1;
			end
			else if (((fetch[11:3] == 9'b100000010))) begin
				iv_opr_alu_2op = 1;
				iv_op_nor = 1;
			end
			else if (((fetch[11:3] == 9'b100000011))) begin
				iv_opr_alu_2op = 1;
				iv_op_xor = 1;
			end
			else if (((fetch[11:3] == 9'b100000100))) begin
				iv_opr_alu_2op = 1;
				iv_op_add = 1;
			end
			else if (((fetch[11:3] == 9'b100000101))) begin
				iv_opr_alu_2op = 1;
				iv_op_sub = 1;
			end
			else if (((fetch[11:3] == 9'b100000110))) begin
				iv_opr_alu_2op = 1;
				iv_op_mul = 1;
			end
			else if (((fetch[11:3] == 9'b100001000))) begin
				iv_opr_alu_2op = 1;
				iv_op_shl = 1;
			end
			else if (((fetch[11:3] == 9'b100001001))) begin
				iv_opr_alu_2op = 1;
				iv_op_ashr = 1;
			end
			else if (((fetch[11:3] == 9'b100001010))) begin
				iv_opr_alu_2op = 1;
				iv_op_lshr = 1;
			end
			else if (((fetch[11:3] == 9'b100010000))) begin
				iv_opr_alu_1op = 1;
				iv_op_ctlz = 1;
			end
			else if (((fetch[11:3] == 9'b100010010))) begin
				iv_opr_alu_1op = 1;
				iv_op_cttz = 1;
			end
			else if (((fetch[11:3] == 9'b100010011))) begin
				iv_opr_alu_1op = 1;
				iv_op_sext8 = 1;
			end
			else if (((fetch[11:3] == 9'b100010100))) begin
				iv_opr_alu_1op = 1;
				iv_op_sext16 = 1;
			end
			else if (((fetch[11:3] == 9'b100100000))) begin
				iv_opr_alu_3op = 1;
				iv_op_addadd = 1;
			end
			else if (((fetch[11:3] == 9'b100100001))) begin
				iv_opr_alu_3op = 1;
				iv_op_subadd = 1;
			end
			else if (((fetch[11:3] == 9'b100100010))) begin
				iv_opr_alu_3op = 1;
				iv_op_addsub = 1;
			end
			else if (((fetch[11:3] == 9'b100100011))) begin
				iv_opr_alu_3op = 1;
				iv_op_subsub = 1;
			end
			else if (((fetch[11:3] == 9'b100100100))) begin
				iv_opr_alu_3op = 1;
				iv_op_addmul = 1;
			end
			else if (((fetch[11:3] == 9'b100100101))) begin
				iv_opr_alu_3op = 1;
				iv_op_submul = 1;
			end
			iv_imm3 = 1;
	end
	else if (((fetch[11:4] == 8'b10011000)) | ((fetch[11:3] == 9'b100110010))) begin
		iv_instr_hw_jump_ind = 1;
			if (((fetch[11:3] == 9'b100110000))) begin
				iv_op_jump_reg = 1;
			end
			else if (((fetch[11:3] == 9'b100110001))) begin
				iv_op_jump_ie = 1;
			end
			else if (((fetch[11:3] == 9'b100110010))) begin
				iv_op_call_reg = 1;
			end
	end
	else if (((fetch[11:5] == 7'b1010001)) | ((fetch[11:4] == 8'b10100100))) begin
		iv_instr_hw_ld_reg = 1;
			if (((fetch[11:3] == 9'b101000101))) begin
				iv_op_ldbux = 1;
			end
			else if (((fetch[11:3] == 9'b101000110))) begin
				iv_op_ldbsx = 1;
			end
			else if (((fetch[11:3] == 9'b101000111))) begin
				iv_op_ldhux = 1;
			end
			else if (((fetch[11:3] == 9'b101001000))) begin
				iv_op_ldhsx = 1;
			end
			else if (((fetch[11:3] == 9'b101001001))) begin
				iv_op_ldx = 1;
			end
			iv_imm3 = 1;
	end
	else if (((fetch[11:4] == 8'b10100101)) | ((fetch[11:3] == 9'b101001100))) begin
		iv_instr_hw_st_reg = 1;
			if (((fetch[11:3] == 9'b101001010))) begin
				iv_op_stbx = 1;
			end
			else if (((fetch[11:3] == 9'b101001011))) begin
				iv_op_sthx = 1;
			end
			else if (((fetch[11:3] == 9'b101001100))) begin
				iv_op_stx = 1;
			end
			iv_imm3 = 1;
	end
	else if (((fetch[11:3] == 9'b101010000)) | ((fetch[11:3] == 9'b101010101)) | ((fetch[11:3] == 9'b101010110))) begin
		iv_instr_hw_system = 1;
			if (((fetch[11:3] == 9'b101010000))) begin
				iv_op_halt = 1;
			end
			else if (((fetch[11:3] == 9'b101010101))) begin
				iv_op_int_en = 1;
			end
			else if (((fetch[11:3] == 9'b101010110))) begin
				iv_op_int_dis = 1;
			end
	end
	else if (((fetch[11:3] == 9'b101010011)) | ((fetch[11:3] == 9'b101011000))) begin
		iv_instr_hw_system_rd = 1;
			if (((fetch[11:3] == 9'b101010011))) begin
				iv_op_printreg = 1;
			end
			else if (((fetch[11:3] == 9'b101011000))) begin
				iv_op_set_status = 1;
			end
	end
	else if (((fetch[11:3] == 9'b101010111))) begin
		iv_instr_hw_system_wr = 1;
			if (((fetch[11:3] == 9'b101010111))) begin
				iv_op_get_status = 1;
			end
	end
	else if (((fetch[11:9] == 3'b111))) begin
		iv_instr_hw_jump_rel = 1;
			if (((fetch[3:0] == 4'b0000))) begin
				iv_op_eq = 1;
			end
			else if (((fetch[3:0] == 4'b0001))) begin
				iv_op_ne = 1;
			end
			else if (((fetch[3:0] == 4'b0010))) begin
				iv_op_slt = 1;
			end
			else if (((fetch[3:0] == 4'b0011))) begin
				iv_op_sge = 1;
			end
			else if (((fetch[3:0] == 4'b0100))) begin
				iv_op_sle = 1;
			end
			else if (((fetch[3:0] == 4'b0101))) begin
				iv_op_sgt = 1;
			end
			else if (((fetch[3:0] == 4'b0110))) begin
				iv_op_ult = 1;
			end
			else if (((fetch[3:0] == 4'b0111))) begin
				iv_op_uge = 1;
			end
			else if (((fetch[3:0] == 4'b1000))) begin
				iv_op_ule = 1;
			end
			else if (((fetch[3:0] == 4'b1001))) begin
				iv_op_ugt = 1;
			end
			else if (((fetch[3:0] == 4'b1010))) begin
				iv_op_binand = 1;
			end
			else if (((fetch[3:0] == 4'b1011))) begin
				iv_op_binnand = 1;
			end
			else if (((fetch[3:0] == 4'b1100))) begin
				iv_op_logand = 1;
			end
			else if (((fetch[3:0] == 4'b1101))) begin
				iv_op_lognand = 1;
			end
			else if (((fetch[3:0] == 4'b1110))) begin
				iv_op_logor = 1;
			end
			else if (((fetch[3:0] == 4'b1111))) begin
				iv_op_lognor = 1;
			end
			iv_imm1 = 1;
	end
	if ( iv_instr_hw_alu & iv_opr_alu_1op & iv_op_ctlz & iv_imm3 )
	begin
		return _dest_ctlz_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_1op & iv_op_cttz & iv_imm3 )
	begin
		return _dest_cttz_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_1op & iv_op_sext16 & iv_imm3 )
	begin
		return _dest_sext16_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_1op & iv_op_sext8 & iv_imm3 )
	begin
		return _dest_sext8_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_2op & iv_op_add & iv_imm3 )
	begin
		return _dest_add_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_2op & iv_op_and & iv_imm3 )
	begin
		return _dest_and_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_2op & iv_op_ashr & iv_imm3 )
	begin
		return _dest_ashr_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_2op & iv_op_lshr & iv_imm3 )
	begin
		return _dest_lshr_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_2op & iv_op_mul & iv_imm3 )
	begin
		return _dest_mul_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_2op & iv_op_nor & iv_imm3 )
	begin
		return _dest_nor_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_2op & iv_op_or & iv_imm3 )
	begin
		return _dest_or_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_2op & iv_op_shl & iv_imm3 )
	begin
		return _dest_shl_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_2op & iv_op_sub & iv_imm3 )
	begin
		return _dest_sub_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_2op & iv_op_xor & iv_imm3 )
	begin
		return _dest_xor_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_3op & iv_op_addadd & iv_imm3 )
	begin
		return _dest_add_add_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_3op & iv_op_addmul & iv_imm3 )
	begin
		return _dest_add_mul_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_3op & iv_op_addsub & iv_imm3 )
	begin
		return _dest_add_sub_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_3op & iv_op_subadd & iv_imm3 )
	begin
		return _dest_sub_add_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_3op & iv_op_submul & iv_imm3 )
	begin
		return _dest_sub_mul_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu & iv_opr_alu_3op & iv_op_subsub & iv_imm3 )
	begin
		return _dest_sub_sub_srcA_src_am_uimm_srcC_;
	end
	else if ( iv_instr_hw_alu_imm & iv_op_addpc )
	begin
		return _dest_add_srcA_imm_;
	end
	else if ( iv_instr_hw_alu_imm & iv_op_lui )
	begin
		return _dest_lui_srcA_imm_;
	end
	else if ( iv_instr_hw_alu_imm & iv_opr_alu_simm & iv_op_addi )
	begin
		return _dest_add_srcA_imm_;
	end
	else if ( iv_instr_hw_alu_imm & iv_opr_alu_simm & iv_op_mulsi )
	begin
		return _dest_muls_srcA_imm_;
	end
	else if ( iv_instr_hw_alu_imm & iv_opr_alu_simm & iv_op_subi )
	begin
		return _dest_sub_srcA_imm_;
	end
	else if ( iv_instr_hw_alu_imm & iv_opr_alu_uimm & iv_op_andi )
	begin
		return _dest_and_srcA_imm_;
	end
	else if ( iv_instr_hw_alu_imm & iv_opr_alu_uimm & iv_op_ashri )
	begin
		return _dest_ashr_srcA_imm_;
	end
	else if ( iv_instr_hw_alu_imm & iv_opr_alu_uimm & iv_op_lshri )
	begin
		return _dest_lshr_srcA_imm_;
	end
	else if ( iv_instr_hw_alu_imm & iv_opr_alu_uimm & iv_op_mului )
	begin
		return _dest_mulu_srcA_imm_;
	end
	else if ( iv_instr_hw_alu_imm & iv_opr_alu_uimm & iv_op_nori )
	begin
		return _dest_nor_srcA_imm_;
	end
	else if ( iv_instr_hw_alu_imm & iv_opr_alu_uimm & iv_op_ori )
	begin
		return _dest_or_srcA_imm_;
	end
	else if ( iv_instr_hw_alu_imm & iv_opr_alu_uimm & iv_op_shli )
	begin
		return _dest_shl_srcA_imm_;
	end
	else if ( iv_instr_hw_alu_imm & iv_opr_alu_uimm & iv_op_xori )
	begin
		return _dest_xor_srcA_imm_;
	end
	else if ( iv_instr_hw_jump_abs & iv_op_call )
	begin
		return call_addr_;
	end
	else if ( iv_instr_hw_jump_abs & iv_op_call_exc )
	begin
		return call_exc_addr_;
	end
	else if ( iv_instr_hw_jump_abs & iv_op_call_int )
	begin
		return call_int_addr_;
	end
	else if ( iv_instr_hw_jump_abs & iv_op_jump )
	begin
		return jump_addr_;
	end
	else if ( iv_instr_hw_jump_ind & iv_op_call_reg )
	begin
		return call_srcB_;
	end
	else if ( iv_instr_hw_jump_ind & iv_op_jump_ie )
	begin
		return jump_ie_srcB_;
	end
	else if ( iv_instr_hw_jump_ind & iv_op_jump_reg )
	begin
		return jump_srcB_;
	end
	else if ( iv_instr_hw_jump_rel & iv_op_binand & iv_imm1 )
	begin
		return jump_binand_srcA_src_op_uimm_addr_;
	end
	else if ( iv_instr_hw_jump_rel & iv_op_binnand & iv_imm1 )
	begin
		return jump_binnand_srcA_src_op_uimm_addr_;
	end
	else if ( iv_instr_hw_jump_rel & iv_op_eq & iv_imm1 )
	begin
		return jump_eq_srcA_src_op_uimm_addr_;
	end
	else if ( iv_instr_hw_jump_rel & iv_op_logand & iv_imm1 )
	begin
		return jump_logand_srcA_src_op_uimm_addr_;
	end
	else if ( iv_instr_hw_jump_rel & iv_op_lognand & iv_imm1 )
	begin
		return jump_lognand_srcA_src_op_uimm_addr_;
	end
	else if ( iv_instr_hw_jump_rel & iv_op_lognor & iv_imm1 )
	begin
		return jump_lognor_srcA_src_op_uimm_addr_;
	end
	else if ( iv_instr_hw_jump_rel & iv_op_logor & iv_imm1 )
	begin
		return jump_logor_srcA_src_op_uimm_addr_;
	end
	else if ( iv_instr_hw_jump_rel & iv_op_ne & iv_imm1 )
	begin
		return jump_ne_srcA_src_op_uimm_addr_;
	end
	else if ( iv_instr_hw_jump_rel & iv_op_sge & iv_imm1 )
	begin
		return jump_sge_srcA_src_op_uimm_addr_;
	end
	else if ( iv_instr_hw_jump_rel & iv_op_sgt & iv_imm1 )
	begin
		return jump_sgt_srcA_src_op_uimm_addr_;
	end
	else if ( iv_instr_hw_jump_rel & iv_op_sle & iv_imm1 )
	begin
		return jump_sle_srcA_src_op_uimm_addr_;
	end
	else if ( iv_instr_hw_jump_rel & iv_op_slt & iv_imm1 )
	begin
		return jump_slt_srcA_src_op_uimm_addr_;
	end
	else if ( iv_instr_hw_jump_rel & iv_op_uge & iv_imm1 )
	begin
		return jump_uge_srcA_src_op_uimm_addr_;
	end
	else if ( iv_instr_hw_jump_rel & iv_op_ugt & iv_imm1 )
	begin
		return jump_ugt_srcA_src_op_uimm_addr_;
	end
	else if ( iv_instr_hw_jump_rel & iv_op_ule & iv_imm1 )
	begin
		return jump_ule_srcA_src_op_uimm_addr_;
	end
	else if ( iv_instr_hw_jump_rel & iv_op_ult & iv_imm1 )
	begin
		return jump_ult_srcA_src_op_uimm_addr_;
	end
	else if ( iv_instr_hw_ld_imm & iv_op_ld )
	begin
		return _dest_ld_srcA_imm_;
	end
	else if ( iv_instr_hw_ld_imm & iv_op_ldbs )
	begin
		return _dest_ldbs_srcA_imm_;
	end
	else if ( iv_instr_hw_ld_imm & iv_op_ldbu )
	begin
		return _dest_ldbu_srcA_imm_;
	end
	else if ( iv_instr_hw_ld_imm & iv_op_ldhs )
	begin
		return _dest_ldhs_srcA_imm_;
	end
	else if ( iv_instr_hw_ld_imm & iv_op_ldhu )
	begin
		return _dest_ldhu_srcA_imm_;
	end
	else if ( iv_instr_hw_ld_reg & iv_op_ldbsx & iv_imm3 )
	begin
		return _dest_ldbs_srcA_src_am_uimm_;
	end
	else if ( iv_instr_hw_ld_reg & iv_op_ldbux & iv_imm3 )
	begin
		return _dest_ldbu_srcA_src_am_uimm_;
	end
	else if ( iv_instr_hw_ld_reg & iv_op_ldhsx & iv_imm3 )
	begin
		return _dest_ldhs_srcA_src_am_uimm_;
	end
	else if ( iv_instr_hw_ld_reg & iv_op_ldhux & iv_imm3 )
	begin
		return _dest_ldhu_srcA_src_am_uimm_;
	end
	else if ( iv_instr_hw_ld_reg & iv_op_ldx & iv_imm3 )
	begin
		return _dest_ld_srcA_src_am_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_move & iv_op_binand & iv_imm1 & iv_imm1 )
	begin
		return _dest_move_binand_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_move & iv_op_binnand & iv_imm1 & iv_imm1 )
	begin
		return _dest_move_binnand_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_move & iv_op_eq & iv_imm1 & iv_imm1 )
	begin
		return _dest_move_eq_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_move & iv_op_logand & iv_imm1 & iv_imm1 )
	begin
		return _dest_move_logand_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_move & iv_op_lognand & iv_imm1 & iv_imm1 )
	begin
		return _dest_move_lognand_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_move & iv_op_lognor & iv_imm1 & iv_imm1 )
	begin
		return _dest_move_lognor_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_move & iv_op_logor & iv_imm1 & iv_imm1 )
	begin
		return _dest_move_logor_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_move & iv_op_ne & iv_imm1 & iv_imm1 )
	begin
		return _dest_move_ne_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_move & iv_op_sge & iv_imm1 & iv_imm1 )
	begin
		return _dest_move_sge_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_move & iv_op_sgt & iv_imm1 & iv_imm1 )
	begin
		return _dest_move_sgt_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_move & iv_op_sle & iv_imm1 & iv_imm1 )
	begin
		return _dest_move_sle_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_move & iv_op_slt & iv_imm1 & iv_imm1 )
	begin
		return _dest_move_slt_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_move & iv_op_uge & iv_imm1 & iv_imm1 )
	begin
		return _dest_move_uge_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_move & iv_op_ugt & iv_imm1 & iv_imm1 )
	begin
		return _dest_move_ugt_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_move & iv_op_ule & iv_imm1 & iv_imm1 )
	begin
		return _dest_move_ule_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_move & iv_op_ult & iv_imm1 & iv_imm1 )
	begin
		return _dest_move_ult_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_select & iv_op_binand & iv_imm1 & iv_imm1 )
	begin
		return _dest_select_binand_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_select & iv_op_binnand & iv_imm1 & iv_imm1 )
	begin
		return _dest_select_binnand_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_select & iv_op_eq & iv_imm1 & iv_imm1 )
	begin
		return _dest_select_eq_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_select & iv_op_logand & iv_imm1 & iv_imm1 )
	begin
		return _dest_select_logand_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_select & iv_op_lognand & iv_imm1 & iv_imm1 )
	begin
		return _dest_select_lognand_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_select & iv_op_lognor & iv_imm1 & iv_imm1 )
	begin
		return _dest_select_lognor_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_select & iv_op_logor & iv_imm1 & iv_imm1 )
	begin
		return _dest_select_logor_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_select & iv_op_ne & iv_imm1 & iv_imm1 )
	begin
		return _dest_select_ne_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_select & iv_op_sge & iv_imm1 & iv_imm1 )
	begin
		return _dest_select_sge_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_select & iv_op_sgt & iv_imm1 & iv_imm1 )
	begin
		return _dest_select_sgt_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_select & iv_op_sle & iv_imm1 & iv_imm1 )
	begin
		return _dest_select_sle_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_select & iv_op_slt & iv_imm1 & iv_imm1 )
	begin
		return _dest_select_slt_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_select & iv_op_uge & iv_imm1 & iv_imm1 )
	begin
		return _dest_select_uge_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_select & iv_op_ugt & iv_imm1 & iv_imm1 )
	begin
		return _dest_select_ugt_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_select & iv_op_ule & iv_imm1 & iv_imm1 )
	begin
		return _dest_select_ule_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_select & iv_op_ult & iv_imm1 & iv_imm1 )
	begin
		return _dest_select_ult_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_test & iv_op_binand & iv_imm1 & iv_imm1 )
	begin
		return _dest_test_binand_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_test & iv_op_binnand & iv_imm1 & iv_imm1 )
	begin
		return _dest_test_binnand_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_test & iv_op_eq & iv_imm1 & iv_imm1 )
	begin
		return _dest_test_eq_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_test & iv_op_logand & iv_imm1 & iv_imm1 )
	begin
		return _dest_test_logand_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_test & iv_op_lognand & iv_imm1 & iv_imm1 )
	begin
		return _dest_test_lognand_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_test & iv_op_lognor & iv_imm1 & iv_imm1 )
	begin
		return _dest_test_lognor_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_test & iv_op_logor & iv_imm1 & iv_imm1 )
	begin
		return _dest_test_logor_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_test & iv_op_ne & iv_imm1 & iv_imm1 )
	begin
		return _dest_test_ne_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_test & iv_op_sge & iv_imm1 & iv_imm1 )
	begin
		return _dest_test_sge_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_test & iv_op_sgt & iv_imm1 & iv_imm1 )
	begin
		return _dest_test_sgt_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_test & iv_op_sle & iv_imm1 & iv_imm1 )
	begin
		return _dest_test_sle_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_test & iv_op_slt & iv_imm1 & iv_imm1 )
	begin
		return _dest_test_slt_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_test & iv_op_uge & iv_imm1 & iv_imm1 )
	begin
		return _dest_test_uge_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_test & iv_op_ugt & iv_imm1 & iv_imm1 )
	begin
		return _dest_test_ugt_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_test & iv_op_ule & iv_imm1 & iv_imm1 )
	begin
		return _dest_test_ule_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_move & iv_op_test & iv_op_ult & iv_imm1 & iv_imm1 )
	begin
		return _dest_test_ult_srcA_src_op_uimm_src_op_uimm_;
	end
	else if ( iv_instr_hw_st_imm & iv_op_st )
	begin
		return st_srcC_srcA_imm_;
	end
	else if ( iv_instr_hw_st_imm & iv_op_stb )
	begin
		return stb_srcC_srcA_imm_;
	end
	else if ( iv_instr_hw_st_imm & iv_op_sth )
	begin
		return sth_srcC_srcA_imm_;
	end
	else if ( iv_instr_hw_st_reg & iv_op_stbx & iv_imm3 )
	begin
		return stb_srcC_srcA_src_am_uimm_;
	end
	else if ( iv_instr_hw_st_reg & iv_op_sthx & iv_imm3 )
	begin
		return sth_srcC_srcA_src_am_uimm_;
	end
	else if ( iv_instr_hw_st_reg & iv_op_stx & iv_imm3 )
	begin
		return st_srcC_srcA_src_am_uimm_;
	end
	else if ( iv_instr_hw_system & iv_op_halt )
	begin
		return halt_;
	end
	else if ( iv_instr_hw_system & iv_op_int_dis )
	begin
		return int_disable_;
	end
	else if ( iv_instr_hw_system & iv_op_int_en )
	begin
		return int_enable_;
	end
	else if ( iv_instr_hw_system_rd & iv_op_printreg )
	begin
		return print_reg_;
	end
	else if ( iv_instr_hw_system_rd & iv_op_set_status )
	begin
		return set_status_;
	end
	else if ( iv_instr_hw_system_wr & iv_op_get_status )
	begin
		return get_status_;
	end
	// for unknown instruction
	return UNKNOWN;
endfunction : decode

`endif
