/******************************************************************************
 *     "Copyright (C) 2013, ApS s.r.o Brno, All Rights Reserved"             *
 ******************************************************************************/
/**
 *  \file
 *  \date   Mon Mar  4 12:01:29 2013, generated by Codasip HW generator v2.0.0.
 *  \brief  Definition of the golden model.
 */

// Represents the golden model of the processor used to predict results of the DUT.
class codix_ca_gm extends ovm_component;

	// registration of component tools
	`ovm_component_utils( codix_ca_gm )

	// declaration of analysis port to connect to the scoreboard
	ovm_analysis_port #(codix_ca_core_regs_transaction) aport_icodix_ca_core_regs_if;
	tlm_analysis_fifo #(codix_ca_input_transaction) m_golden_model_codix_ca_input_fifo;
	ovm_analysis_port #(codix_ca_output_transaction) analysis_export;

	// Constructor - creates new instance of this class
	function new( string name, ovm_component parent );
		super.new( name, parent );
	endfunction : new

	// Build - instantiates child components
	function void build;
		super.build();
		aport_icodix_ca_core_regs_if = new( "aport_icodix_ca_core_regs_if", this );
		m_golden_model_codix_ca_input_fifo = new( "m_golden_model_codix_ca_input_fifo", this );
		analysis_export = new( "analysis_export", this );
	endfunction: build

	// Resource access methods
	// sends the content of register file to the scoreboard
	function void store_regs();
		automatic codix_ca_core_regs_transaction tr = new( "golden_model_codix_ca_core_regs_transaction" );
		// load register file content
		tr.codix_ca_core_regs_init = new[32];
		foreach( tr.codix_ca_core_regs_init[i] )
			codix_ia_get_regs( tr.codix_ca_core_regs_init[i], i );
		// send it to the scoreboard
		aport_icodix_ca_core_regs_if.write( tr );
	endfunction: store_regs

	// create transaction and send it to scoreboard
	function void store_result();
		automatic codix_ca_output_transaction tr = new( "golden_model_codix_ca_output_transaction " );
		codix_ia_get_port_halt( tr.codix_ca_port_halt );
		codix_ia_get_port_output( tr.codix_ca_port_output );
		codix_ia_get_port_output_en( tr.codix_ca_port_output_en );
		codix_ia_get_port_error( tr.codix_ca_port_error );

		analysis_export.write( tr );
	endfunction: store_result

	// initialize and run the simulation of the golden model
	task run();
		automatic string path = "./xexes/program";
		automatic longint unsigned counter = 0;

		// reset the golden model
		codix_ia_reset();
		// initialization it
		codix_ia_load_program_file( path );
		// start the simulation of the golden model
		while ( (codix_ia_clock_cycle() == 0) & (counter < ITERATION_COUNT_LIMIT) )
		begin
			store_result();
			++counter;
		end
		store_result();
	endtask: run

	// send content of register files to the scoreboard.
	function void extract();
		store_regs();
	endfunction: extract

endclass: codix_ca_gm
